buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
		maven { url "https://plugins.gradle.org/m2/" }
	}

	dependencies {
		classpath 'cz.habarta.typescript-generator:typescript-generator-gradle-plugin:2.36.1070'
		classpath 'cz.habarta.typescript-generator:typescript-generator-spring:2.36.1070'
		classpath "org.springframework.boot:spring-boot-gradle-plugin:2.7.5"
		classpath "io.spring.gradle:dependency-management-plugin:1.0.12.RELEASE"
		classpath "gradle.plugin.org.flywaydb:gradle-plugin-publishing:8.5.12"
	}
}

apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"
apply plugin: "org.flywaydb.flyway"
apply plugin: "cz.habarta.typescript-generator"
apply plugin: "java"
apply plugin: "jacoco"
// apply plugin: "checkstyle"

sourceCompatibility = '17'

repositories {
	mavenCentral()
}

springBoot {
	buildInfo()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-websocket:2.7.5'
	implementation 'org.springframework.boot:spring-boot-starter-validation:3.0.3'
	implementation 'org.springframework.boot:spring-boot-starter-security:2.7.5'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa:2.7.5'
	implementation 'org.springframework.boot:spring-boot-starter-cache:2.7.5'
	implementation 'org.flywaydb:flyway-mysql:8.5.12'
	implementation 'org.mariadb.jdbc:mariadb-java-client:3.0.6'

	implementation 'org.springframework.boot:spring-boot-starter-actuator:2.7.5'
	implementation 'io.micrometer:micrometer-registry-prometheus:1.10.1'

	implementation 'org.springdoc:springdoc-openapi-ui:1.6.13'
	implementation 'org.springdoc:springdoc-openapi-data-rest:1.6.13'
	implementation 'org.springdoc:springdoc-openapi-security:1.6.13'

	implementation project(':library')

	// developmentOnly("org.springframework.boot:spring-boot-devtools")

	testImplementation "org.testcontainers:testcontainers:1.17.6"
	testImplementation "org.testcontainers:junit-jupiter:1.17.6"
	testImplementation "org.testcontainers:mariadb:1.17.6"
	testImplementation 'org.springframework.security:spring-security-test:5.7.3'
	testImplementation('org.springframework.boot:spring-boot-starter-test:2.7.5') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
}

jar {
	enabled = false
	archivesBaseName = 'api'
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.named("build") { finalizedBy("preparePublishNpm") }

task preparePublishNpm() {
	dependsOn(generateTypeScript)
	doLast {
		new File("${projectDir}/build/typescript-generator/", "package.json").text = """{
  "name": "@mineaurion/api",
  "repository": "git://github.com/Mineaurion/Api.git",
  "version": "$version",
  "types": "application.d.ts"
}
"""
	}
}

generateTypeScript {
	classes = [
			'com.mineaurion.api.library.model.query.Server',
			'com.mineaurion.api.server.model.Server',
	]
	outputFileType = 'declarationFile'
	outputFile = 'build/typescript-generator/application.d.ts'
	jsonLibrary = 'jackson2'
	outputKind = 'module'
	noFileComment = true
	stringQuotes = "singleQuotes"
	ignoreSwaggerAnnotations = false
	customTypeNamingFunction  = "function(name, simpleName) { if (name.startsWith('com.mineaurion.api.library.model.query')) return 'Query' + simpleName; }"
}

jacoco {
	toolVersion = "0.8.8"
}

jacocoTestReport {
	reports {
		xml.enabled true
		csv.enabled false
		html.enabled true
		html.destination file("$buildDir/reports/jacoco")
	}
}

//jacocoTestCoverageVerification {
//	violationRules {
//		rule {
//			enabled = true
//			limit {
//				counter = 'BRANCH'
//				minimum = 0.80
//			}
//			excludes = []
//		}
//
//		rule {
//			enabled = true
//			limit {
//				counter = 'LINE'
//				minimum = 0.80
//			}
//			excludes = []
//		}
//	}
//}

//checkstyle {
//	toolVersion = '10.5.0'
//	// configFile = file("${rootDir}/config/checkstyle/checkstyle.xml")
//}
//
//checkstyleMain {
//	source = 'src/main/java'
//}
//checkstyleTest {
//	source = 'src/test/java'
//}
//
//tasks.withType(Checkstyle) {
//	reports {
//		xml.enabled false
//		html.enabled true
//	}
//}

test.finalizedBy jacocoTestReport
jacocoTestCoverageVerification.dependsOn jacocoTestReport
check.dependsOn jacocoTestCoverageVerification

test {
	useJUnitPlatform()
}